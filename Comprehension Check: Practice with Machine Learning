library(dslabs)
library(dplyr)
library(lubridate)
data(reported_heights)

dat <- mutate(reported_heights, date_time = ymd_hms(time_stamp)) %>%
  filter(date_time >= make_date(2016, 01, 25) & date_time < make_date(2016, 02, 1)) %>%
  mutate(type = ifelse(day(date_time) == 25 & hour(date_time) == 8 & between(minute(date_time), 15, 30), "inclass","online")) %>%
  select(sex, type)

y <- factor(dat$sex, c("Female", "Male"))
x <- dat$type

#Q1
dat %>% group_by(type) %>% summarize(prop_female = mean(sex == "Female"))

#Q2
y_hat <- ifelse(x == "online", "Male", "Female") %>% 
      factor(levels = levels(y))
mean(y_hat==y)

#Q3
table(y_hat, y)

#Q4
library(caret)
sensitivity(y_hat, y)

#Q5
library(caret)
specificity(y_hat, y)

#Q6
mean(y == "Female")

#Q7
data(iris)
iris <- iris[-which(iris$Species=='setosa'),]
y <- iris$Species
set.seed(76)
test_index <- createDataPartition(y, times=1, p=0.5, list=FALSE)
test <- iris[test_index,]
train <- iris[-test_index,]

#Q8
foo <- function(x){
	rangedValues <- seq(range(x)[1], range(x)[2], by=0.1)
	sapply(rangedValues, function(i){
		y_hat <- ifelse(x>i, 'virginica', 'versicolor')
		mean(y_hat==train$Species)
	})
}
predictions <- apply(train[,-5], 2, foo)
sapply(predictions, max)

#Q9
predictions <- foo(train[,4])
rangedValues <- seq(range(train[,4])[1], range(train[,4])[2], by=0.1)
cutoffs <-rangedValues[which(predictions==max(predictions))]

y_hat <- ifelse(test[,4]>cutoffs[1], 'virginica', 'versicolor')
mean(y_hat==test$Species)

#Q10
foo <- function(x){
    rangedValues <- seq(range(x)[1], range(x)[2], by=0.1)
    sapply(rangedValues, function(i){
        y_hat <- ifelse(x>i, 'virginica', 'versicolor')
        mean(y_hat==train$Species)
    })
}
predictions <- apply(train[,-5],2,foo)
sapply(predictions,max)

#Q11
plot(iris, pch=21, bg=iris$Species) #plotting data 

data(iris)
iris <- iris[-which(iris$Species=='setosa'),]
y <- iris$Species

plot(iris, pch=21, bg=iris$Species)

set.seed(76) 
test_index <- createDataPartition(y, times=1, p=0.5, list=FALSE)
test <- iris[test_index,]
train <- iris[-test_index,]
            
petalLengthRange <- seq(range(train$Petal.Length)[1], range(train$Petal.Length)[2],by=0.1)
petalWidthRange <- seq(range(train$Petal.Width)[1], range(train$Petal.Width)[2],by=0.1)

length_predictions <- sapply(petalLengthRange, function(i){
		y_hat <- ifelse(train$Petal.Length>i, 'virginica', 'versicolor')
		mean(y_hat==train$Species)
	})
length_cutoff <- petalLengthRange[which.max(length_predictions)] # 4.6

width_predictions <- sapply(petalWidthRange, function(i){
		y_hat <- ifelse(train$Petal.Width>i, 'virginica', 'versicolor')
		mean(y_hat==train$Species)
	})
width_cutoff <- petalWidthRange[which.max(width_predictions)] # 1.5

y_hat <- ifelse(test$Petal.Length>length_cutoff & test$Petal.Width>width_cutoff, 'virginica', 'versicolor')
mean(y_hat==test$Species)
